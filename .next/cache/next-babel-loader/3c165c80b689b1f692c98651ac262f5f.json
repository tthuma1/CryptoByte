{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Container, Header, Card, Icon, Button, Image, Segment, Message, Visibility } from 'semantic-ui-react';\nimport MMPrompt from '../../components/MMPrompt';\nimport cryptoByte721 from '../../ethereum/cryptoByte721';\nimport { Link, Router } from '../../routes';\nimport web3 from '../../ethereum/web3';\nimport Jdenticon from '../../components/Jdenticon';\nimport axios from 'axios';\nlet currentAccount, headerEl, pausedEl;\nlet vikingAmount = process.env.VIKING_AMOUNT;\n\nclass TokensOfOwner extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      mounted: false,\n      headerHeight: 0,\n      pausedHeight: 0,\n      images: {},\n      buyLoading: false,\n      jdentHeigth: 270\n    });\n\n    _defineProperty(this, \"buyToken\", async event => {\n      let id = event.target.name;\n      event.preventDefault();\n      this.setState({\n        buyLoading: true\n      });\n\n      try {\n        await cryptoByte721.methods.buyToken(id).send({\n          from: currentAccount,\n          value: this.props.tokenInfo[id]['price']\n        });\n        Router.replaceRoute('/tokens');\n      } catch {}\n\n      this.setState({\n        buyLoading: false\n      });\n    });\n\n    _defineProperty(this, \"updateImage\", async (e, {\n      calculations\n    }) => {\n      this.setState({\n        jdentHeigth: calculations.height - 60\n      });\n    });\n  }\n\n  static async getInitialProps({\n    query\n  }) {\n    try {\n      let owner = web3.utils.toChecksumAddress(query.owner);\n      let tokens = [];\n      const count = await cryptoByte721.methods.balanceOf(owner).call();\n\n      for (let i = 0; i < count; i++) {\n        let token = await cryptoByte721.methods.tokenOfOwnerByIndex(owner, i).call();\n        tokens.push(token);\n      }\n\n      let tokenInfo = {};\n\n      for (let i = 0; i < tokens.length; i++) {\n        let id = tokens[i];\n        tokenInfo[id] = {};\n        tokenInfo[id]['price'] = await cryptoByte721.methods.getTokenPrice(id).call();\n      }\n\n      tokens.sort(function (a, b) {\n        return a - b;\n      });\n      return {\n        tokens,\n        owner,\n        tokenInfo,\n        count,\n        isValidAccount: true\n      };\n    } catch {\n      return {\n        isValidAccount: false\n      };\n    }\n  }\n\n  async componentDidMount() {\n    currentAccount = (await web3.eth.getAccounts())[0];\n    headerEl = document.getElementById('header');\n    const headerVisible = setInterval(() => {\n      if (headerEl.style.visibility === 'visible') {\n        pausedEl = document.getElementById('pausedmsg');\n        this.setState({\n          transVisible: true,\n          headerHeight: headerEl.clientHeight,\n          pausedHeight: pausedEl.clientHeight\n        });\n        clearInterval(headerVisible);\n      }\n    }, 100);\n    window.addEventListener('pausedClosed', _e => {\n      this.setState({\n        pausedHeight: 0\n      });\n    }); // check if token has image and save it in state\n\n    let images = {};\n\n    for (let i = 0; i < this.props.count; i++) {\n      let id = this.props.tokens[i];\n\n      try {\n        await axios.get(`../static/images/ERC721/${id}.jpg`);\n        images[id] = true;\n      } catch (error) {\n        images[id] = false;\n      }\n    }\n\n    await this.setState({\n      images\n    });\n    this.setState({\n      mounted: true\n    });\n  }\n\n  renderTokens() {\n    const items = this.props.tokens.map(id => {\n      id = Number(id);\n      return __jsx(Card, {\n        key: id\n      }, this.state.images[id] ? __jsx(Visibility, {\n        onUpdate: this.updateImage\n      }, __jsx(Image, {\n        src: `/static/images/ERC721/${id}.jpg`,\n        wrapped: true\n      })) : __jsx(Container, {\n        textAlign: \"center\",\n        style: {\n          background: 'rgba(0,0,0,.05)',\n          overflow: 'auto',\n          paddingTop: '30px',\n          paddingBottom: '30px'\n        }\n      }, __jsx(Jdenticon, {\n        value: id,\n        size: this.state.jdentHeigth\n      })), __jsx(Card.Content, null, __jsx(Card.Header, null, id <= vikingAmount ? 'Viking Collection #' + id : 'Classic Token #' + (Number(id) - vikingAmount)), __jsx(Card.Description, null, __jsx(\"b\", null, Number(this.props.tokenInfo[id]['price']) ? 'Token price: ' + web3.utils.fromWei(this.props.tokenInfo[id]['price'], 'ether') + ' ETH' : 'Token not for sale')), __jsx(Card.Meta, {\n        style: {\n          overflow: 'auto'\n        }\n      }, \"Owner\", currentAccount == this.props.owner ? ' (You)' : '', \":\", ' ', this.props.owner)), __jsx(Card.Content, {\n        extra: true\n      }, __jsx(Link, {\n        route: `/token/${id}`\n      }, __jsx(\"a\", null, __jsx(Button, null, \"View Details\", __jsx(Icon, {\n        name: \"chevron circle right\"\n      })))), Number(this.props.tokenInfo[id]['price']) && this.props.owner != currentAccount ? __jsx(Button, {\n        name: id,\n        primary: true,\n        onClick: this.buyToken,\n        loading: this.state.buyLoading,\n        disabled: this.state.buyLoading\n      }, \"Buy token\", __jsx(Icon, {\n        name: \"shopping cart right\"\n      })) : ''));\n    });\n    return __jsx(Card.Group, {\n      itemsPerRow: 2\n    }, items);\n  }\n\n  render() {\n    return __jsx(Layout, {\n      mounted: this.state.mounted\n    }, __jsx(MMPrompt, null), __jsx(Container, {\n      textAlign: \"center\",\n      style: {\n        marginTop: !this.state.pausedHeight ? this.state.headerHeight + 20 : 20\n      }\n    }, this.props.isValidAccount ? __jsx(\"div\", null, __jsx(Header, {\n      as: \"h2\",\n      inverted: true,\n      dividing: true\n    }, this.props.owner, ' ', __jsx(\"span\", {\n      style: {\n        color: '#E8E8E8'\n      }\n    }, \"owns\"), ' ', this.props.count, ' ', __jsx(\"span\", {\n      style: {\n        color: '#E8E8E8'\n      }\n    }, \"token\", this.props.count != 1 ? 's' : '', \".\")), this.renderTokens()) : __jsx(\"div\", null, __jsx(Message, {\n      negative: true\n    }, __jsx(Message.Header, null, \"Oops, something went wrong!\"), __jsx(\"p\", null, \"Looks like the account you're searching for doesn't exist.\")), __jsx(Segment, {\n      inverted: true,\n      clearing: true\n    }, \"If you're seeing this message, you most likely aren't logged in your\", ' ', __jsx(Link, {\n      route: \"https://metamask.io/\"\n    }, __jsx(\"a\", {\n      target: \"_blank\"\n    }, \" MetaMask\")), ' ', \"account.\", __jsx(\"br\", null), \"To view MetaMask use instructions, click on this button.\", ' ', __jsx(MMPrompt, {\n      trigger: __jsx(Button, {\n        size: \"small\",\n        compact: true\n      }, \"View Instructions\"),\n      visible: false\n    })))));\n  }\n\n}\n\nexport default TokensOfOwner;","map":null,"metadata":{},"sourceType":"module"}