{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Link } from '../../routes';\nimport Head from 'next/head';\nimport { Button, Header, Visibility, Container, Transition, Table, Grid, Loader, Segment, Message } from 'semantic-ui-react';\nimport MMPrompt from '../../components/MMPrompt';\nimport web3 from '../../ethereum/web3';\nimport cryptoByte from '../../ethereum/cryptoByte';\nlet headerEl, pausedEl, isOwner, isValidAccount;\nlet decimals, symbol, balance;\nlet allowances = {};\nlet allowances2 = {};\n\nclass AccountIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      mounted: false,\n      transVisible: false,\n      headerHeight: 0,\n      pausedHeight: 0,\n      allowancesLoaded: false,\n      allowancesLoaded2: false\n    });\n\n    _defineProperty(this, \"getAccountInfo\", async () => {\n      decimals = await cryptoByte.methods.decimals().call();\n      symbol = await cryptoByte.methods.symbol().call();\n\n      if (typeof this.props.address !== 'undefined') {\n        isValidAccount = !!this.props.address.match(/^0x[a-fA-F0-9]{40}$/g);\n      }\n\n      if (isValidAccount) {\n        balance = await cryptoByte.methods.balanceOf(this.props.address).call();\n      }\n\n      const MMAddress = (await web3.eth.getAccounts())[0];\n\n      if (MMAddress === this.props.address) {\n        isOwner = true;\n      }\n    });\n\n    _defineProperty(this, \"getAllowanceInfo\", async () => {\n      if (isValidAccount) {\n        const events = await cryptoByte.getPastEvents('Approval', {\n          fromBlock: 0,\n          toBlock: 'latest',\n          filter: {\n            spender: this.props.address\n          }\n        });\n\n        for (let i = 0; i < events.length; i++) {\n          allowances[events[i].returnValues.owner] = await cryptoByte.methods.allowance(events[i].returnValues.owner, this.props.address).call();\n        }\n\n        for (let key of Object.keys(allowances)) {\n          if (allowances[key] === '0') {\n            delete allowances[key];\n          }\n        }\n\n        this.setState({\n          allowancesLoaded: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"getAllowanceInfo2\", async () => {\n      if (isValidAccount) {\n        const events = await cryptoByte.getPastEvents('Approval', {\n          fromBlock: 0,\n          toBlock: 'latest',\n          filter: {\n            owner: this.props.address\n          }\n        });\n\n        for (let i = 0; i < events.length; i++) {\n          allowances2[events[i].returnValues.spender] = await cryptoByte.methods.allowance(this.props.address, events[i].returnValues.spender).call();\n        }\n\n        for (let key of Object.keys(allowances2)) {\n          if (allowances2[key] === '0') {\n            delete allowances2[key];\n          }\n        }\n\n        this.setState({\n          allowancesLoaded2: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"renderAllowances\", () => {\n      const items = [];\n\n      for (let key in allowances) {\n        items.push(__jsx(Table.Row, {\n          key: key\n        }, __jsx(Table.Cell, {\n          style: {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis'\n          }\n        }, __jsx(Link, {\n          href: `/account/${key}`\n        }, __jsx(\"a\", {\n          title: key\n        }, key))), __jsx(Table.Cell, {\n          title: allowances[key] / 10 ** decimals\n        }, (allowances[key] / 10 ** decimals).toLocaleString('en-US') + ' ' + symbol)));\n      }\n\n      return items.length > 0 ? __jsx(Table.Body, null, items) : __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n        colSpan: \"2\"\n      }, \"Looks like nobody allows you any \", symbol, \".\")));\n    });\n\n    _defineProperty(this, \"renderAllowances2\", () => {\n      const items = [];\n\n      for (let key in allowances2) {\n        items.push(__jsx(Table.Row, {\n          key: key\n        }, __jsx(Table.Cell, {\n          style: {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis'\n          }\n        }, __jsx(Link, {\n          href: `/account/${key}`\n        }, __jsx(\"a\", {\n          title: key\n        }, key))), __jsx(Table.Cell, {\n          title: allowances2[key] / 10 ** decimals\n        }, (allowances2[key] / 10 ** decimals).toLocaleString('en-US') + ' ' + symbol)));\n      }\n\n      return items.length > 0 ? __jsx(Table.Body, null, items) : __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n        colSpan: \"2\"\n      }, \"Looks like you don't allow anyone any \", symbol, \".\")));\n    });\n\n    _defineProperty(this, \"updateContent\", () => {\n      this.setState({\n        headerHeight: headerEl.clientHeight\n      });\n    });\n  }\n\n  static async getInitialProps({\n    query\n  }) {\n    try {\n      query.address = web3.utils.toChecksumAddress(query.address);\n    } catch {}\n\n    return {\n      address: query.address\n    };\n  }\n\n  async componentDidMount() {\n    headerEl = document.getElementById('header');\n    const headerVisible = setInterval(() => {\n      if (headerEl.style.visibility === 'visible') {\n        pausedEl = document.getElementById('pausedmsg');\n        this.setState({\n          transVisible: true,\n          headerHeight: headerEl.clientHeight,\n          pausedHeight: pausedEl.clientHeight\n        });\n        clearInterval(headerVisible);\n      }\n    }, 100);\n    await this.getAccountInfo();\n    window.addEventListener('pausedClosed', _e => {\n      this.setState({\n        pausedHeight: 0\n      });\n    });\n    this.setState({\n      mounted: true\n    });\n    await this.getAllowanceInfo();\n    await this.getAllowanceInfo2();\n  }\n\n  render() {\n    return __jsx(Layout, {\n      mounted: this.state.mounted\n    }, __jsx(Head, null, __jsx(\"title\", null, \"My Account - \", this.props.address)), __jsx(MMPrompt, null), __jsx(Visibility, {\n      onUpdate: this.updateContent\n    }, __jsx(Transition, {\n      visible: this.state.transVisible,\n      animation: \"slide down\",\n      duration: 500\n    }, __jsx(Container, {\n      textAlign: \"center\",\n      style: {\n        marginTop: !this.state.pausedHeight ? this.state.headerHeight + 20 : 20\n      }\n    }, isValidAccount ? __jsx(\"div\", null, __jsx(Header, {\n      id: \"style-7\",\n      as: \"h2\",\n      dividing: true,\n      inverted: true,\n      style: {\n        overflow: 'auto'\n      }\n    }, __jsx(\"p\", {\n      style: {\n        color: '#E8E8E8'\n      }\n    }, \"You're looking at information for account\"), '\\n', this.props.address), __jsx(Grid, {\n      stackable: true,\n      divided: true,\n      inverted: true\n    }, __jsx(Grid.Row, {\n      columns: 3\n    }, __jsx(Grid.Column, null, __jsx(Table, {\n      unstackable: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      colSpan: \"2\"\n    }, \"Overview\"))), __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, null, \"Balance: \"), __jsx(Table.Cell, {\n      title: balance / 10 ** decimals\n    }, (balance / 10 ** decimals).toLocaleString('en-US'), ' ' + symbol))))), __jsx(Grid.Column, null, __jsx(Table, {\n      unstackable: true,\n      inverted: true,\n      striped: true,\n      celled: true,\n      fixed: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      colSpan: \"2\"\n    }, \"List of allowances\")), __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      colSpan: \"2\"\n    }, \"Allowed \", symbol, \" by:\"))), this.state.allowancesLoaded ? this.renderAllowances() : __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n      colSpan: \"2\"\n    }, __jsx(Loader, {\n      active: true,\n      inline: \"centered\",\n      inverted: true\n    })))), __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      colSpan: \"2\"\n    }, \"Allows \", symbol, \" to:\"))), this.state.allowancesLoaded2 ? this.renderAllowances2() : __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n      colSpan: \"2\"\n    }, __jsx(Loader, {\n      active: true,\n      inline: \"centered\",\n      inverted: true\n    })))))), isOwner && __jsx(Grid.Column, {\n      textAlign: \"left\"\n    }, __jsx(Segment, {\n      inverted: true,\n      style: {\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        padding: '0'\n      }\n    }, __jsx(Header, {\n      as: \"h4\"\n    }, \"Use the buttons below to interact with the contract.\"), \"Tranfer tokens from your account to another:\", __jsx(\"br\", null), __jsx(Link, {\n      route: `/manage/transfer`\n    }, __jsx(\"a\", null, __jsx(Button, null, \"Transfer\"))), __jsx(\"br\", null), __jsx(\"br\", null), \"Change the amount of tokens, that you allow another account to spend (or approve a new account):\", __jsx(\"br\", null), __jsx(Link, {\n      route: `/manage/change_allowance`\n    }, __jsx(\"a\", null, __jsx(Button, null, \"Change Allowance\"))), __jsx(\"br\", null), __jsx(\"br\", null), \"Transfer tokens that you are allowed by another account:\", __jsx(\"br\", null), __jsx(Link, {\n      route: `/manage/transfer_allowed`\n    }, __jsx(\"a\", null, __jsx(Button, null, \"Transfer Allowed\"))), __jsx(\"br\", null)))))) : __jsx(\"div\", null, __jsx(Message, {\n      negative: true\n    }, __jsx(Message.Header, null, \"Oops, something went wrong!\"), __jsx(\"p\", null, \"Looks like the account you're searching for doesn't exist.\")), __jsx(Segment, {\n      inverted: true,\n      clearing: true\n    }, \"If you're seeing this message, you most likely aren't logged in your\", ' ', __jsx(Link, {\n      route: \"https://metamask.io/\"\n    }, __jsx(\"a\", {\n      target: \"_blank\"\n    }, \" MetaMask\")), ' ', \"account.\", __jsx(\"br\", null), \"To view MetaMask use instructions, click on this button.\", ' ', __jsx(MMPrompt, {\n      trigger: __jsx(Button, {\n        size: \"small\",\n        compact: true\n      }, \"View Instructions\"),\n      visible: false\n    })))))));\n  }\n\n}\n\nexport default AccountIndex;","map":null,"metadata":{},"sourceType":"module"}