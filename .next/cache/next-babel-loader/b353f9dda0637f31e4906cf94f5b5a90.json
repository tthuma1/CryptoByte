{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport Head from 'next/head';\nimport { Container, Header, Visibility, Form, Button, Input, Message, Dropdown, Grid, Table, Loader } from 'semantic-ui-react';\nimport MMPrompt from '../../components/MMPrompt';\nimport web3 from '../../ethereum/web3';\nimport cryptoByte from '../../ethereum/cryptoByte';\nimport BigNumber from 'bignumber.js';\nimport { Link } from '../../routes';\nconst dropdownOptions = [{\n  key: 'GCRB',\n  text: 'GCRB (1e+9)',\n  value: '1e+9'\n}, {\n  key: 'MCRB',\n  text: 'MCRB (1e+6)',\n  value: '1e+6'\n}, {\n  key: 'kCRB',\n  text: 'kCRB (1000)',\n  value: '1000'\n}, {\n  key: 'CRB',\n  text: 'CRB (1)',\n  value: '1'\n}, {\n  key: 'mCRB',\n  text: 'mCRB (0.001)',\n  value: '0.001'\n}, {\n  key: 'µCRB',\n  text: 'µCRB (1e-6)',\n  value: '1e-6'\n}, {\n  key: 'nCRB',\n  text: 'nCRB (1e-9)',\n  value: '1e-9'\n}, {\n  key: 'pCRB',\n  text: 'pCRB (1e-12)',\n  value: '1e-12'\n}, {\n  key: 'fCRB',\n  text: 'fCRB (1e-15)',\n  value: '1e-15'\n}, {\n  key: 'aCRB',\n  text: 'aCRB (1e-18)',\n  value: '1e-18'\n}];\nlet headerEl, pausedEl, isValidAccount;\nlet decimals, symbol, currentAccount;\nlet amount, fac, dec, currentAmount;\nlet allowances = {};\n\nclass ChangeAllowance extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      mounted: false,\n      headerHeight: 0,\n      pausedHeight: 0,\n      allowancesLoaded: false,\n      speAddr: '',\n      amount: '',\n      speAddrErr: false,\n      amountErr: false,\n      msgErr: '',\n      loading: false,\n      succes: true,\n      dropdownValue: '1',\n      dropdownKey: 'CRB'\n    });\n\n    _defineProperty(this, \"getCryptoByteInfo\", async () => {\n      decimals = await cryptoByte.methods.decimals().call();\n      symbol = await cryptoByte.methods.symbol().call();\n      currentAccount = (await web3.eth.getAccounts())[0];\n\n      if (typeof currentAccount !== 'undefined') {\n        isValidAccount = true;\n      }\n    });\n\n    _defineProperty(this, \"getAllowanceInfo\", async () => {\n      this.setState({\n        allowancesLoaded: false\n      });\n\n      if (isValidAccount) {\n        const events = await cryptoByte.getPastEvents('Approval', {\n          fromBlock: 0,\n          toBlock: 'latest',\n          filter: {\n            owner: currentAccount\n          }\n        });\n\n        for (let i = 0; i < events.length; i++) {\n          allowances[events[i].returnValues.spender] = await cryptoByte.methods.allowance(currentAccount, events[i].returnValues.spender).call();\n        }\n\n        for (let key of Object.keys(allowances)) {\n          if (allowances[key] === '0') {\n            delete allowances[key];\n          }\n        }\n      }\n\n      this.setState({\n        allowancesLoaded: true\n      });\n    });\n\n    _defineProperty(this, \"renderAllowances\", () => {\n      const items = [];\n\n      for (let key in allowances) {\n        items.push(__jsx(Table.Row, {\n          key: key\n        }, __jsx(Table.Cell, {\n          style: {\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis'\n          }\n        }, __jsx(Link, {\n          href: `/account/${key}`\n        }, __jsx(\"a\", {\n          title: key\n        }, key))), __jsx(Table.Cell, {\n          title: allowances[key] / 10 ** decimals\n        }, (allowances[key] / 10 ** decimals).toLocaleString('en-US') + ' ' + symbol), __jsx(Table.Cell, null, __jsx(Button, {\n          fluid: true,\n          onClick: () => {\n            this.setState({\n              speAddr: key,\n              speAddrErr: false\n            });\n          },\n          style: {\n            overflow: 'auto'\n          }\n        }, \"Change this address' allowance\"))));\n      }\n\n      return items.length > 0 ? __jsx(Table.Body, null, items) : __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n        colSpan: \"3\"\n      }, \"Looks like you don't allow anyone any \", symbol, \".\")));\n    });\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        msgErr: '',\n        success: false\n      });\n\n      try {\n        if (this.state.speAddrErr || this.state.speAddr === '') {\n          throw {\n            message: 'Invalid spender address.'\n          };\n        }\n\n        if (this.state.amountErr || this.state.amount === '') {\n          throw {\n            message: 'Amount must be a positive number.'\n          };\n        }\n\n        amount = BigNumber(this.state.amount);\n        fac = BigNumber(this.state.dropdownValue);\n        dec = BigNumber('1e+' + decimals);\n        fac = fac.times(dec);\n        amount = amount.times(fac);\n        currentAmount = BigNumber(allowances[web3.utils.toChecksumAddress(this.state.speAddr)]);\n\n        if (amount.isGreaterThan(currentAmount)) {\n          await cryptoByte.methods.increaseAllowance(web3.utils.toChecksumAddress(this.state.speAddr), amount.minus(currentAmount).toFixed()).send({\n            from: currentAccount\n          });\n        } else if (amount.isLessThan(currentAmount)) {\n          await cryptoByte.methods.decreaseAllowance(web3.utils.toChecksumAddress(this.state.speAddr), currentAmount.minus(amount).toFixed()).send({\n            from: currentAccount\n          });\n        } else if (amount.isEqualTo(currentAmount)) {\n          throw {\n            message: 'New amount is the same as current amount.'\n          };\n        } else {\n          await cryptoByte.methods.approve(web3.utils.toChecksumAddress(this.state.speAddr), amount.toFixed()).send({\n            from: currentAccount\n          });\n        }\n\n        this.setState({\n          loading: false,\n          success: true\n        });\n        this.getAllowanceInfo();\n      } catch (err) {\n        this.setState({\n          loading: false,\n          msgErr: err.message\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateContent\", () => {\n      this.setState({\n        headerHeight: headerEl.clientHeight\n      });\n    });\n\n    _defineProperty(this, \"numberWithCommas\", num => {\n      let parts = num.split('.');\n      parts[0] = parts[0].replace(/^0+/, '');\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n      if (parts[0] === '') {\n        parts[0] = '0';\n      }\n\n      return parts.join('.');\n    });\n  }\n\n  async componentDidMount() {\n    headerEl = document.getElementById('header');\n    const headerVisible = setInterval(() => {\n      if (headerEl.style.visibility === 'visible') {\n        pausedEl = document.getElementById('pausedmsg');\n        this.setState({\n          headerHeight: headerEl.clientHeight,\n          pausedHeight: pausedEl.clientHeight\n        });\n        clearInterval(headerVisible);\n      }\n    }, 100);\n    window.addEventListener('pausedClosed', _e => {\n      this.setState({\n        pausedHeight: 0\n      });\n    });\n    await this.getCryptoByteInfo();\n    this.setState({\n      mounted: true\n    });\n    await this.getAllowanceInfo();\n  }\n\n  render() {\n    return __jsx(Layout, {\n      mounted: this.state.mounted\n    }, __jsx(Head, null, __jsx(\"title\", null, \"Crypto Byte - Change allowance\")), __jsx(MMPrompt, null), __jsx(Visibility, {\n      onUpdate: this.updateContent\n    }, __jsx(Container, {\n      style: {\n        marginTop: !this.state.pausedHeight ? this.state.headerHeight + 20 : 20\n      }\n    }, __jsx(Header, {\n      as: \"h3\",\n      inverted: true,\n      dividing: true,\n      textAlign: \"center\"\n    }, \"You can change the amount of tokens, that you allow another account to spend with the form below.\"), __jsx(Grid, {\n      stackable: true,\n      divided: true,\n      inverted: true\n    }, __jsx(Grid.Row, {\n      columns: 2\n    }, __jsx(Grid.Column, null, __jsx(Form, {\n      inverted: true,\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Input, {\n      error: this.state.speAddrErr,\n      label: \"Spender address\"\n    }, __jsx(Input, {\n      placeholder: \"0x0000000000000000000000000000000000000000\",\n      value: this.state.speAddr,\n      onChange: event => {\n        this.setState({\n          speAddr: event.target.value\n        });\n\n        if (!event.target.value.match(/^(0x||0X)[a-fA-F0-9]{40}$/g) && !(event.target.value === '')) {\n          this.setState({\n            speAddrErr: {\n              content: 'Please enter a valid address.'\n            }\n          });\n        } else {\n          this.setState({\n            speAddrErr: false\n          });\n        }\n      }\n    })), __jsx(Form.Input, {\n      label: \"Amount to approve\",\n      error: this.state.amountErr,\n      style: {\n        width: '90%'\n      }\n    }, __jsx(Input, {\n      placeholder: \"123.456\",\n      label: __jsx(Dropdown, {\n        scrolling: true,\n        value: this.state.dropdownValue,\n        options: dropdownOptions,\n        onChange: (_event, data) => {\n          this.setState({\n            dropdownValue: data.value,\n            dropdownKey: data.options.find(o => o.value === data.value).key\n          });\n        }\n      }),\n      labelPosition: \"right\",\n      value: this.state.amount,\n      onChange: event => {\n        this.setState({\n          amount: event.target.value\n        });\n\n        if ((isNaN(event.target.value) || parseFloat(event.target.value) < 0 || event.target.value.substring(0, 2) === '0x') && !(event.target.value === '')) {\n          this.setState({\n            amountErr: {\n              content: 'The amount must be a positive number.'\n            }\n          });\n        } else {\n          this.setState({\n            amountErr: false\n          });\n        }\n      }\n    })), this.state.amount && this.state.speAddr && !this.state.amountErr && !this.state.speAddrErr && __jsx(Message, {\n      info: true,\n      style: {\n        overflow: 'auto'\n      }\n    }, __jsx(\"p\", null, \"This is going to change your allowance to address\", ' ', __jsx(\"b\", null, web3.utils.toChecksumAddress(this.state.speAddr)), ' ', \"from\", ' ', __jsx(\"b\", null, allowances[web3.utils.toChecksumAddress(this.state.speAddr)] ? this.numberWithCommas((allowances[web3.utils.toChecksumAddress(this.state.speAddr)] / 10 ** decimals / this.state.dropdownValue).toString()) : 0, ' ', this.state.dropdownKey), ' ', \"to\", ' ', __jsx(\"b\", null, this.numberWithCommas(this.state.amount), ' ', this.state.dropdownKey), \".\")), this.state.msgErr && __jsx(\"div\", null, __jsx(Message, {\n      negative: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Something went wrong!\"), this.state.msgErr), __jsx(\"br\", null)), this.state.success && __jsx(\"div\", null, __jsx(Message, {\n      positive: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Transaction complete!\"), \"The transaction was completed successfully.\"), __jsx(\"br\", null)), __jsx(Button, {\n      type: \"submit\",\n      loading: this.state.loading,\n      disabled: this.state.loading\n    }, \"Submit\"))), __jsx(Grid.Column, null, __jsx(Table, {\n      unstackable: true,\n      inverted: true,\n      striped: true,\n      celled: true,\n      fixed: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      colSpan: \"3\"\n    }, \"You currently allow \", symbol, \" to:\")), __jsx(Table.Row, {\n      columns: 2\n    }, __jsx(Table.HeaderCell, {\n      textAlign: \"center\"\n    }, \"Address\"), __jsx(Table.HeaderCell, {\n      textAlign: \"center\"\n    }, \"Value\"), __jsx(Table.HeaderCell, null))), this.state.allowancesLoaded ? this.renderAllowances() : __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, {\n      colSpan: \"3\"\n    }, __jsx(Loader, {\n      active: true,\n      inline: \"centered\",\n      inverted: true\n    })))))))))));\n  }\n\n}\n\nexport default ChangeAllowance;","map":null,"metadata":{},"sourceType":"module"}