{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Container, Image, Card, Icon, Button, Message } from 'semantic-ui-react';\nimport Jdenticon from '../../components/Jdenticon';\nimport cryptoByte721 from '../../ethereum/cryptoByte721';\nimport web3 from '../../ethereum/web3';\nimport { Link, Router } from '../../routes';\nimport axios from 'axios';\nlet currentAccount, headerEl, pausedEl;\nlet vikingAmount = process.env.VIKING_AMOUNT;\n\nclass TokenDetails extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      mounted: false,\n      headerHeight: 0,\n      pausedHeight: 0,\n      image: false,\n      buyLoading: false,\n      msgErr: ''\n    });\n\n    _defineProperty(this, \"buyToken\", async event => {\n      event.preventDefault();\n      this.setState({\n        buyLoading: true,\n        msgErr: ''\n      });\n      let price = await cryptoByte721.methods.getTokenPrice(this.props.id).call();\n\n      try {\n        await cryptoByte721.methods.buyToken(this.props.id).send({\n          from: currentAccount,\n          value: price\n        });\n        Router.replaceRoute(`/token/${this.props.id}`);\n      } catch (err) {\n        this.setState({\n          msgErr: err.message\n        });\n      }\n\n      this.setState({\n        buyLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps({\n    query\n  }) {\n    let tokenInfo = {};\n    let id = query.id;\n    tokenInfo['owner'] = await cryptoByte721.methods.ownerOf(id).call();\n    tokenInfo['price'] = await cryptoByte721.methods.getTokenPrice(id).call();\n    return {\n      id: query.id,\n      tokenInfo\n    };\n  }\n\n  async componentDidMount() {\n    currentAccount = (await web3.eth.getAccounts())[0];\n    headerEl = document.getElementById('header');\n    const headerVisible = setInterval(() => {\n      if (headerEl.style.visibility === 'visible') {\n        pausedEl = document.getElementById('pausedmsg');\n        this.setState({\n          transVisible: true,\n          headerHeight: headerEl.clientHeight,\n          pausedHeight: pausedEl.clientHeight\n        });\n        clearInterval(headerVisible);\n      }\n    }, 100);\n    window.addEventListener('pausedClosed', _e => {\n      this.setState({\n        pausedHeight: 0\n      });\n    }); // check if token has image and save it in state\n\n    try {\n      await axios.get(`/static/images/ERC721/${this.props.id}.jpg`);\n      await this.setState({\n        image: true\n      });\n    } catch (error) {\n      await this.setState({\n        image: false\n      });\n    }\n\n    this.setState({\n      mounted: true\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      mounted: this.state.mounted\n    }, __jsx(Container, {\n      textAlign: \"center\",\n      style: {\n        marginTop: !this.state.pausedHeight ? this.state.headerHeight + 20 : 20\n      }\n    }, __jsx(Card, {\n      fluid: true\n    }, this.state.image ? __jsx(Container, {\n      textAlign: \"center\",\n      style: {\n        background: 'rgba(0,0,0,.05)',\n        overflow: 'auto'\n      }\n    }, __jsx(Image, {\n      src: `/static/images/ERC721/${this.props.id}.jpg`,\n      size: \"big\",\n      wrapped: true\n    })) : __jsx(Container, {\n      textAlign: \"center\",\n      style: {\n        background: 'rgba(0,0,0,.05)',\n        overflow: 'auto'\n      }\n    }, __jsx(Jdenticon, {\n      value: this.props.id,\n      size: 270\n    })), __jsx(Card.Content, null, __jsx(Card.Header, null, Number(this.props.id) <= vikingAmount ? 'Viking Collection #' + this.props.id : 'Classic Token #' + (Number(this.props.id) - vikingAmount)), __jsx(Card.Description, null, __jsx(\"b\", null, Number(this.props.tokenInfo['price']) ? 'Token price: ' + web3.utils.fromWei(this.props.tokenInfo['price'], 'ether') + ' ETH' : 'Token not for sale')), __jsx(Card.Meta, {\n      style: {\n        overflow: 'auto'\n      }\n    }, \"Owner\", currentAccount == this.props.tokenInfo['owner'] ? ' (You)' : '', \": \", this.props.tokenInfo['owner'])), __jsx(Card.Content, {\n      extra: true\n    }, this.props.tokenInfo['owner'] == currentAccount ? __jsx(\"div\", null, __jsx(Link, {\n      route: `/sell/${this.props.id}`\n    }, __jsx(\"a\", null, __jsx(Button, null, Number(this.props.tokenInfo['price']) ? 'Change price or remove from sale' : 'Put up for sale', __jsx(Icon, {\n      name: \"tag right\"\n    })))), __jsx(Link, {\n      route: `/gift/${this.props.id}`\n    }, __jsx(\"a\", null, __jsx(Button, null, \"Gift token\", __jsx(Icon, {\n      name: \"gift right\"\n    }))))) : '', this.props.tokenInfo['owner'] != currentAccount && Number(this.props.tokenInfo['price']) ? __jsx(Button, {\n      primary: true,\n      onClick: this.buyToken,\n      loading: this.state.buyLoading,\n      disabled: this.state.buyLoading\n    }, \"Buy token\", __jsx(Icon, {\n      name: \"shopping cart right\"\n    })) : '')), this.state.msgErr && __jsx(Message, {\n      negative: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Something went wrong!\"), this.state.msgErr)));\n  }\n\n}\n\nexport default TokenDetails;","map":null,"metadata":{},"sourceType":"module"}