{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport Head from 'next/head';\nimport MMPrompt from '../../components/MMPrompt';\nimport { Button, Header, Visibility, Container, Message, Form, Input, Dropdown } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport cryptoByte from '../../ethereum/cryptoByte';\nimport BigNumber from 'bignumber.js';\nconst dropdownOptions = [{\n  key: 'GCRB',\n  text: 'GCRB (1e+9)',\n  value: '1e+9'\n}, {\n  key: 'MCRB',\n  text: 'MCRB (1e+6)',\n  value: '1e+6'\n}, {\n  key: 'kCRB',\n  text: 'kCRB (1000)',\n  value: '1000'\n}, {\n  key: 'CRB',\n  text: 'CRB (1)',\n  value: '1'\n}, {\n  key: 'mCRB',\n  text: 'mCRB (0.001)',\n  value: '0.001'\n}, {\n  key: 'µCRB',\n  text: 'µCRB (1e-6)',\n  value: '1e-6'\n}, {\n  key: 'nCRB',\n  text: 'nCRB (1e-9)',\n  value: '1e-9'\n}, {\n  key: 'pCRB',\n  text: 'pCRB (1e-12)',\n  value: '1e-12'\n}, {\n  key: 'fCRB',\n  text: 'fCRB (1e-15)',\n  value: '1e-15'\n}, {\n  key: 'aCRB',\n  text: 'aCRB (1e-18)',\n  value: '1e-18'\n}];\nlet headerEl, pausedEl;\nlet decimals, symbol, price, currentAccount;\nlet inUSD, inETH;\n\nclass BuyTokens extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      mounted: false,\n      headerHeight: 0,\n      pausedHeight: 0,\n      amount: '',\n      amountErr: false,\n      amountETH: 0,\n      amountUSD: 0,\n      ETHtoUSD: 0,\n      dropdownValue: '1',\n      dropdownKey: 'CRB',\n      msgErr: false,\n      success: false\n    });\n\n    _defineProperty(this, \"getCryptoByteInfo\", async () => {\n      decimals = await cryptoByte.methods.decimals().call();\n      symbol = await cryptoByte.methods.symbol().call();\n      price = await cryptoByte.methods.tokenPrice().call();\n      price = BigNumber(price).div('1e+18');\n      currentAccount = (await web3.eth.getAccounts())[0];\n    });\n\n    _defineProperty(this, \"getETHprice\", () => {\n      fetch(`https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD&api_key=${process.env.CRYPTOCOMPARE_KEY}`).then(async response => {\n        this.setState({\n          ETHtoUSD: (await response.json()).USD\n        });\n\n        if (typeof inETH !== 'undefined') {\n          this.setState({\n            amountUSD: inETH.times(this.state.ETHtoUSD).toFixed()\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", async () => {\n      this.setState({\n        loading: true,\n        msgErr: '',\n        success: false\n      });\n\n      try {\n        if (this.state.amountErr || this.state.amount === '') {\n          throw {\n            message: 'Amount must be a positive number.'\n          };\n        }\n\n        if (this.state.amountETH === '0') {\n          throw {\n            message: \"Can't buy that few tokens (you should increase the amount).\"\n          };\n        }\n\n        await cryptoByte.methods.buyToken().send({\n          from: currentAccount,\n          value: web3.utils.toWei(this.state.amountETH, 'ether')\n        });\n        this.setState({\n          loading: false,\n          success: true\n        });\n      } catch (err) {\n        this.setState({\n          loading: false,\n          msgErr: err.message\n        });\n      }\n    });\n\n    _defineProperty(this, \"setAmountETH\", input => {\n      if (input !== '') {\n        input = BigNumber(input).times(BigNumber(this.state.dropdownValue));\n        inETH = input.times(price);\n\n        try {\n          web3.utils.toWei(inETH.toFixed(), 'ether');\n        } catch {\n          inETH = BigNumber(inETH.toFixed().split('.')[0] + '.' + inETH.toFixed().split('.')[1].substring(0, 18));\n        }\n\n        inUSD = inETH.times(this.state.ETHtoUSD);\n        this.setState({\n          amountETH: inETH.toFixed(),\n          amountUSD: inUSD.toFixed()\n        });\n      } else {\n        this.setState({\n          amountETH: 0,\n          amountUSD: 0\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateContent\", () => {\n      this.setState({\n        headerHeight: headerEl.clientHeight\n      });\n    });\n  }\n\n  async componentDidMount() {\n    headerEl = document.getElementById('header');\n    const headerVisible = setInterval(() => {\n      if (headerEl.style.visibility === 'visible') {\n        pausedEl = document.getElementById('pausedmsg');\n        this.setState({\n          transVisible: true,\n          headerHeight: headerEl.clientHeight,\n          pausedHeight: pausedEl.clientHeight\n        });\n        clearInterval(headerVisible);\n      }\n    }, 100);\n    window.addEventListener('pausedClosed', _e => {\n      this.setState({\n        pausedHeight: 0\n      });\n    });\n    await this.getETHprice();\n    setInterval(this.getETHprice, 30000);\n    await this.getCryptoByteInfo();\n    this.setState({\n      mounted: true\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      mounted: true\n    }, __jsx(Head, null, __jsx(\"title\", null, \"Crypto Byte - Buy tokens\")), __jsx(MMPrompt, null), __jsx(Visibility, {\n      onUpdate: this.updateContent\n    }, __jsx(Container, {\n      style: {\n        marginTop: !this.state.pausedHeight ? this.state.headerHeight + 20 : 20\n      }\n    }, __jsx(Header, {\n      as: \"h3\",\n      inverted: true,\n      dividing: true,\n      textAlign: \"center\"\n    }, \"You can buy Crypto Byte tokens (CRB) with ETH with the form below.\"), __jsx(Form, {\n      inverted: true,\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Group, {\n      widths: \"equal\"\n    }, __jsx(Form.Input, {\n      label: \"Amount of CRB to buy\",\n      error: this.state.amountErr\n    }, __jsx(Input, {\n      placeholder: \"123.456\",\n      label: __jsx(Dropdown, {\n        scrolling: true,\n        value: this.state.dropdownValue,\n        options: dropdownOptions,\n        onChange: async (_event, data) => {\n          await this.setState({\n            dropdownValue: data.value,\n            dropdownKey: data.options.find(o => o.value === data.value).key\n          });\n          this.setAmountETH(this.state.amount);\n        }\n      }),\n      labelPosition: \"right\",\n      value: this.state.amount,\n      onChange: event => {\n        this.setState({\n          amount: event.target.value\n        });\n\n        if ((isNaN(event.target.value) || parseFloat(event.target.value) < 0 || event.target.value.substring(0, 2) === '0x') && !(event.target.value === '')) {\n          this.setState({\n            amountErr: {\n              content: 'The amount must be a positive number.'\n            },\n            amountETH: 0,\n            amountUSD: 0\n          });\n        } else {\n          this.setState({\n            amountErr: false\n          });\n          this.setAmountETH(event.target.value);\n        }\n      }\n    })), __jsx(Form.Field, null, __jsx(\"label\", null), __jsx(Message, null, \"This purchase is going to cost you \", this.state.amountETH, ' ', \"ETH (~ $\", this.state.amountUSD, \").\"))), this.state.amount && !this.state.amountErr && __jsx(Message, {\n      info: true\n    }, __jsx(\"p\", null, \"You are going to buy\", ' ', __jsx(\"b\", null, this.state.amount, \" \", this.state.dropdownKey), ' ', \"with this transaction.\")), this.state.msgErr && __jsx(\"div\", null, __jsx(Message, {\n      negative: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Something went wrong!\"), this.state.msgErr), __jsx(\"br\", null)), this.state.success && __jsx(\"div\", null, __jsx(Message, {\n      positive: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Transaction complete!\"), \"The transaction was completed successfully.\"), __jsx(\"br\", null)), __jsx(Button, {\n      type: \"submit\",\n      loading: this.state.loading,\n      disabled: this.state.loading\n    }, \"Purchase\")))));\n  }\n\n}\n\nexport default BuyTokens;","map":null,"metadata":{},"sourceType":"module"}