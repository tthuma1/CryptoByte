{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Modal, Button, Header, Image } from 'semantic-ui-react';\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3';\nlet isMetaMask;\n\nclass MMPrompt extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      modalOpen: true,\n      visibility: 'hidden'\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(this, \"handleOpen\", () => {\n      this.setState({\n        modalOpen: true\n      });\n    });\n  }\n\n  async componentDidMount() {\n    isMetaMask = await web3.currentProvider.isMetaMask;\n\n    if (isMetaMask || this.props.visible === false) {\n      this.handleClose();\n    }\n  }\n\n  render() {\n    return __jsx(Modal, {\n      size: \"small\",\n      open: this.state.modalOpen,\n      trigger: this.props.trigger,\n      onClose: this.handleClose,\n      onOpen: this.handleOpen\n    }, __jsx(Header, {\n      as: \"h3\"\n    }, __jsx(Image, {\n      src: \"/static/images/download-metamask-dark.png\",\n      as: \"a\",\n      href: \"https://metamask.io/\",\n      target: \"_blank\"\n    }), \"Use MetaMask to interact with the contract\"), __jsx(Modal.Content, {\n      image: true,\n      scrolling: true\n    }, __jsx(Image, {\n      size: \"medium\",\n      src: \"/static/images/metamask-network.png\"\n    }), __jsx(Modal.Description, null, __jsx(\"p\", null, \"If you would like to interact with the Crypto Byte contract, you'll need to have\", ' ', __jsx(Link, {\n      route: \"https://metamask.io/\"\n    }, __jsx(\"a\", {\n      target: \"_blank\"\n    }, \" MetaMask\")), ' ', \"installed in your browser.\", __jsx(\"br\", null), \"Then also make sure you're connected to the Rinkeby Test Net.\"))), __jsx(Modal.Actions, null, __jsx(Button, {\n      color: \"green\",\n      inverted: true,\n      onClick: this.handleClose\n    }, \"OK\")));\n  }\n\n}\n\nexport default MMPrompt;","map":null,"metadata":{},"sourceType":"module"}