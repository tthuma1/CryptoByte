{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport MMPrompt from '../../components/MMPrompt';\nimport { Container, Header, Form, Message, Button, Segment } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport cryptoByte721 from '../../ethereum/cryptoByte721';\nimport BigNumber from 'bignumber.js';\nimport Jdenticon from '../../components/Jdenticon';\nimport { Router } from '../../routes';\nlet headerEl, pausedEl, currentAccount;\nlet priceETH = 0;\n\nclass BuyToken721 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      mounted: false,\n      headerHeight: 0,\n      pausedHeight: 0,\n      msgErr: false,\n      success: false,\n      priceUSD: 0,\n      id: 0,\n      initialId: 0,\n      loading: false\n    });\n\n    _defineProperty(this, \"updateInfo\", () => {\n      fetch(`https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD&api_key=${process.env.CRYPTOCOMPARE_KEY}`).then(async response => {\n        let ETHtoUSD = (await response.json()).USD;\n        this.setState({\n          priceUSD: priceETH.times(ETHtoUSD).toFixed(),\n          id: Number(await cryptoByte721.methods.totalSupply().call()) + 1\n        });\n\n        if (this.state.id != this.state.initialId) {\n          location.reload();\n        }\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        msgErr: '',\n        success: false\n      });\n\n      try {\n        await cryptoByte721.methods.safeMint(currentAccount).send({\n          from: currentAccount,\n          value: web3.utils.toWei(priceETH.toFixed(), 'ether')\n        });\n        this.setState({\n          loading: false,\n          success: true\n        });\n        Router.pushRoute(`/token/${this.state.id}`);\n      } catch (err) {\n        this.setState({\n          loading: false,\n          msgErr: err.message\n        });\n      }\n    });\n  }\n\n  async componentDidMount() {\n    currentAccount = (await web3.eth.getAccounts())[0];\n    headerEl = document.getElementById('header');\n    const headerVisible = setInterval(() => {\n      if (headerEl.style.visibility === 'visible') {\n        pausedEl = document.getElementById('pausedmsg');\n        this.setState({\n          headerHeight: headerEl.clientHeight,\n          pausedHeight: pausedEl.clientHeight\n        });\n        clearInterval(headerVisible);\n      }\n    }, 100);\n    window.addEventListener('pausedClosed', _e => {\n      this.setState({\n        pausedHeight: 0\n      });\n    });\n    priceETH = await cryptoByte721.methods.getMintPrice().call();\n    priceETH = BigNumber(priceETH).div('1e+18');\n    this.setState({\n      initialId: Number(await cryptoByte721.methods.totalSupply().call()) + 1\n    });\n    await this.updateInfo();\n    setInterval(this.updateInfo, 30000);\n    this.setState({\n      mounted: true\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      mounted: true\n    }, __jsx(MMPrompt, null), __jsx(Container, {\n      style: {\n        marginTop: !this.state.pausedHeight ? this.state.headerHeight + 20 : 20\n      }\n    }, __jsx(Header, {\n      as: \"h3\",\n      inverted: true,\n      dividing: true,\n      textAlign: \"center\"\n    }, \"You can buy new ERC721 Crypto Byte tokens with ETH with the form below.\"), __jsx(Form, {\n      inverted: true,\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Group, {\n      widths: \"equal\"\n    }, __jsx(Form.Field, null, __jsx(\"label\", null), __jsx(Segment, {\n      textAlign: \"center\",\n      style: {\n        padding: 0\n      }\n    }, __jsx(\"div\", {\n      style: {\n        background: 'rgba(0,0,0,.05)',\n        overflow: 'auto'\n      }\n    }, __jsx(Jdenticon, {\n      size: 270,\n      value: this.state.id\n    }))), __jsx(Message, null, \"The ID of your newly bought token will be #\", this.state.id, \".\", __jsx(\"br\", null), \"Above image will be used to identify your token.\")), __jsx(Form.Field, null, __jsx(\"label\", null), __jsx(Message, null, \"This purchase is going to cost you \", priceETH.toFixed(), \" ETH (~ $\", this.state.priceUSD, \").\", __jsx(\"br\", null), \"Gas isn't included in the price above.\"))), this.state.msgErr && __jsx(\"div\", null, __jsx(Message, {\n      negative: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Something went wrong!\"), this.state.msgErr), __jsx(\"br\", null)), this.state.success && __jsx(\"div\", null, __jsx(Message, {\n      positive: true,\n      compact: true\n    }, __jsx(Message.Header, null, \"Transaction complete!\"), \"The transaction was completed successfully.\"), __jsx(\"br\", null)), __jsx(Button, {\n      type: \"submit\",\n      loading: this.state.loading,\n      disabled: this.state.loading\n    }, \"Purchase\"))));\n  }\n\n}\n\nexport default BuyToken721;","map":null,"metadata":{},"sourceType":"module"}